#include <SPI.h>

void myDigitalWrite(int pin, byte state)
{
  switch (state)
  {
    case 1: 
      switch (pin)
      {
        case 2:
        {
            PORTD = PORTD | B00000100;
            
            break;
        }
        case 3:
        {
            PORTD = PORTD | B00001000;
            
            break;
        }
        case 4:
        {
            PORTD = PORTD | B00010000;
            break;
        }
        case 5:
        {
            PORTD = PORTD | B00100000;
        }
        case 6:
        {
            PORTD = PORTD | B01000000;
            break;
        }
        case 7:
        {
            PORTD = PORTD | B10000000;
            break;
        }
        case 8:
        {
            PORTB = PORTB | B00000001;
            break;
        }
        case 9:
        {
            PORTB = PORTB | B00000010;
            break;
        }
        case 10:
        {
            PORTB = PORTB | B00000100;
            break;
        }
        case 11:
        {
            PORTB = PORTB | B00001000;
            break;
        }
        case 12:
        {
            PORTB = PORTB | B00010000;
            break;
        }
        case 13:
        {
            PORTB = PORTB | B00100000;
            break;
        }
        default: break;
      }
      break;
      
    case 0:
      switch(pin)
      {
        
        case 2:
        {
            PORTD = PORTD & B11111011;
            break;
        }
        case 3:
        {
            PORTD = PORTD & B11110111;
            break;
        }
        case 4:
        {
            PORTD = PORTD & B11101111;
            break;
        }
        case 5:
        {
            PORTD = PORTD & B11011111;
            break;
        }
        case 6:
        {
            PORTD = PORTD & B10111111;
            break;
        }
        case 7:
        {
            PORTD = PORTD & B01111111;
            break;
        }
        case 8:
        {
            PORTB = PORTB & B11111110;
            break;
        }
        
        case 9:
        {
            PORTB = PORTB & B11111101;
            break;
        }
        
        case 10:
        {
            PORTB = PORTB & B11111011;
            break;
        }
        
        case 11:
        {
            PORTB = PORTB & B11110111;
            break;
        }
        
        case 12:
        {
            PORTB = PORTB & B11101111;
            break;
        }
        
        case 13:
        {
            PORTB = PORTB & B11011111;
            break;
        }
        default: break;
        
        
      }
      default: break;
  }
  return;
}

//************************ START OF STOLEN CODE ***********************

//************************ DISPLAY CLASS START*************************
class LCDnokia5110
{
  public:
    
    LCDnokia5110(int, int, int, int, int);
    void LcdClear();
    void LcdInitialise();
    void LcdWrite(byte, byte);
    void LcdString(char*);
    void LcdCharacter(char character);
    void GotoXY(int, int);
    void ShowLogo(int);
    void ShowFace(int);
    void ShowImage(const unsigned char[], int);
    int CharSpace;
  private:

};

int PIN_SCE;      //pin names corresponing to the pins on the board
int PIN_RESET;
int PIN_DC;
int PIN_SDIN;
int PIN_SCLK;

int CharSpace;

LCDnokia5110::LCDnokia5110(int rst, int ce, int dc, int in, int clk) {
#define LCD_C     LOW
#define LCD_D     HIGH
#define LCD_CMD   0

  // velikost LCD
#define LCD_X     84
#define LCD_Y     48

  PIN_SCE = ce;
  PIN_RESET = rst;
  PIN_DC = dc;
  PIN_SDIN = in;
  PIN_SCLK = clk;

  CharSpace = 1;
}



void LCDnokia5110::LcdCharacter(char character)
{

  static const byte ASCII[][5] =
  {
    {0x00, 0x00, 0x00, 0x00, 0x00} // 20
    , {0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
    , {0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
    , {0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
    , {0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
    , {0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
    , {0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
    , {0x00, 0x00, 0x07, 0x05, 0x07} // 27 ' ----- Celsius modify char
    , {0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
    , {0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
    , {0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
    , {0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
    , {0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
    , {0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
    , {0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
    , {0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
    , {0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
    , {0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
    , {0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
    , {0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
    , {0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
    , {0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
    , {0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
    , {0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
    , {0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
    , {0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
    , {0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
    , {0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
    , {0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
    , {0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
    , {0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
    , {0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
    , {0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
    , {0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
    , {0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
    , {0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
    , {0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
    , {0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
    , {0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
    , {0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
    , {0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
    , {0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
    , {0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
    , {0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
    , {0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
    , {0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
    , {0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
    , {0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
    , {0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
    , {0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
    , {0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
    , {0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
    , {0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
    , {0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
    , {0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
    , {0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
    , {0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
    , {0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
    , {0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
    , {0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
    , {0x02, 0x04, 0x08, 0x10, 0x20} // 5c Y
    , {0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
    , {0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
    , {0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
    , {0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
    , {0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
    , {0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
    , {0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
    , {0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
    , {0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
    , {0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
    , {0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
    , {0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
    , {0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
    , {0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
    , {0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
    , {0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
    , {0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
    , {0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
    , {0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
    , {0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
    , {0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
    , {0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
    , {0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
    , {0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
    , {0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
    , {0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
    , {0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
    , {0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
    , {0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
    , {0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
    , {0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
    , {0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
    , {0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
    , {0x10, 0x08, 0x08, 0x10, 0x08} // 7e �
    , {0x00, 0x06, 0x09, 0x09, 0x06} // 7f �
  };


  if (CharSpace > 0) {
    LcdWrite(LCD_D, 0x00);
  }

  for (int index = 0; index < 5; index++)
  {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }

  if (CharSpace > 1) {
    LcdWrite(LCD_D, 0x00);
  }


}

void LCDnokia5110::LcdClear(void)
{

  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
  }
}


void LCDnokia5110::LcdString(char* characters)
{



  while (*characters)
  {
    LcdCharacter(*characters++);
  }




}


void LCDnokia5110::LcdWrite(byte dc, byte data)
{
  myDigitalWrite(PIN_DC, dc);
  myDigitalWrite(PIN_SCE, LOW);
  SPI.transfer(data);
//  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
  myDigitalWrite(PIN_SCE, HIGH);
}


void LCDnokia5110::LcdInitialise(void)
{
  pinMode(PIN_SCE,   OUTPUT);
  pinMode(PIN_RESET, OUTPUT);
  pinMode(PIN_DC,    OUTPUT);
  pinMode(PIN_SDIN,  OUTPUT);
  pinMode(PIN_SCLK,  OUTPUT);

  myDigitalWrite(PIN_RESET, LOW);
  myDigitalWrite(PIN_RESET, HIGH);

  LcdWrite(LCD_CMD, 0x21);  // LCD Extended Commands.
  LcdWrite(LCD_CMD, 0xB1);  // Set LCD Vop (Contrast). //B1
  LcdWrite(LCD_CMD, 0x04);  // Set Temp coefficent. //0x04
  LcdWrite(LCD_CMD, 0x14);  // LCD bias mode 1:48. //0x13
  LcdWrite(LCD_CMD, 0x0c);  // LCD in normal mode. 0x0d for inverse
  LcdWrite(LCD_C, 0x20);
  LcdWrite(LCD_C, 0x0C);
}

void LCDnokia5110::GotoXY(int x, int y) {

  LcdWrite( 0, 0x80 | x);  // Column.
  LcdWrite( 0, 0x40 | y);  // Row.

}

void LCDnokia5110::ShowImage(const unsigned char Image[], int miliSeconds)
{

  GotoXY(0, 0);
  for (int index = 0; index < 503; index++)
  {
    LcdWrite(LCD_D, Image[index]);
  }
  delay(miliSeconds);
}


void LCDnokia5110::ShowLogo(int timeShow) {

  const unsigned char arduino [] = {
    0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xDE, 0xC7, 0xC1, 0xC0, 0xE0, 0xFF, 0x7F, 0x00, 0x00,
    0xE0, 0xC0, 0xC0, 0x60, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x60, 0xF0, 0xFF, 0x03,
    0x00, 0x00, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x80, 0xF0, 0x20, 0x00, 0x80, 0xE0, 0x03, 0x03, 0x00,
    0x00, 0x00, 0xF0, 0xF0, 0x60, 0x30, 0x30, 0xF0, 0x40, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x60, 0x70,
    0x30, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7F, 0x03, 0x01, 0x01, 0x00, 0x00, 0xE0, 0xFF,
    0x0F, 0x00, 0x00, 0xF8, 0x7F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xFF, 0xC3, 0x40, 0x60,
    0xF8, 0xFF, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0xC0, 0xC0, 0x70, 0x18, 0xFF, 0xFF, 0x00, 0xF0, 0x7F,
    0x03, 0x00, 0x00, 0x00, 0xF0, 0x7F, 0x03, 0x00, 0x00, 0xE0, 0x7E, 0x07, 0x00, 0x00, 0x7C, 0xFF,
    0xC3, 0xC0, 0xC0, 0x60, 0x38, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  };

  GotoXY(0, 0);
  for (int index = 0; index < 503; index++)
  {
    LcdWrite(LCD_D, arduino[index]);
  }
  delay(timeShow);

}

void LCDnokia5110::ShowFace(int timeShow) {

  const unsigned char arduino [] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x38, 0x1c, 0x1c, 0x0e, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0e, 0x0e, 0x1e, 0x1c, 0x3c, 0x7c, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xf8, 0x7c, 0x3c, 0x1c, 0x1e, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0e, 0x0e, 0x0e, 0x1c, 0x1c, 0x38, 0x38, 0x70, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0xf8, 0xfe, 0x3f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7e, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0x7e, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x3f, 0xfe, 0xf8, 0xc0, 0x00, 0x00, 
  0x00, 0x7e, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0x7e, 0x00, 
  0x00, 0x00, 0x03, 0x1f, 0x7f, 0xfc, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0x7e, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7e, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xfc, 0x7f, 0x1f, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0e, 0x1c, 0x1c, 0x38, 0x38, 0x70, 0x70, 0x70, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0x70, 0x70, 0x78, 0x38, 0x3c, 0x3e, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x1f, 0x3e, 0x3c, 0x38, 0x78, 0x70, 0x70, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0x70, 0x70, 0x70, 0x38, 0x38, 0x1c, 0x1c, 0x0e, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x16, 0x11, 0x16, 0x78, 0x00, 0x7f, 0x09, 0x09, 0x76, 0x00, 0x7f, 0x41, 0x41, 0x3e, 0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f, 0x00, 0x41, 0x7f, 0x41, 0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f, 0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



  GotoXY(0, 0);
  for (int index = 0; index < 503; index++)
  {
    LcdWrite(LCD_D, arduino[index]);
  }
  delay(timeShow);

}

//********DISPLAY CLASS END**************************
//********END OF STOLEN CODE*************************

char nudes[] = {'S', 'E', 'N', 'D', ' ', 'N', 'U', 'D', 'E', 'S'};
char topkek[] = {'T', 'O', 'P', 'K', 'E', 'K'};
char abeceda[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
LCDnokia5110 dis(7, 8, 9, 11, 13); //(int rst, int ce, int dc, int in, int clk) {
//********************** PADDLE CLASS START*************************
class Paddle {
  public:
    short posX;
    short posY;

    short paddleLength;
    short paddleWidth;
    Paddle(short a, short b, short c, short d)
    {
      posX = a;
      posY = b;
      paddleLength = c;
      paddleWidth = d;
    }


    void drawSelf(bool visible)
    {
      for (short w = 0; w < paddleWidth; w++)
      {
        short row = posY / 8;
        short rowStart = posY % 8;
        if (!visible)
        {
          for (short x = row - 1; x < row + (paddleLength / 8) + 2; x++)
          {
            dis.GotoXY(posX + w, x);
            dis.LcdWrite(LCD_D, 0x00);
          }
        }
        else
        {
          byte toWrite = 0;
          short runner = 0;
          for (short x = 0; x < paddleLength; x++)
          {
            if (rowStart + runner < 8)
            {
              toWrite += 1 << (rowStart + runner);
              runner++;
            }
            else
            {
              dis.GotoXY(posX + w, row);
              dis.LcdWrite(LCD_D, toWrite);
              toWrite = 1;

              row++;
              rowStart = 0;
              runner = 1;
            }

          }
          dis.GotoXY(posX + w, row);
          dis.LcdWrite(LCD_D, toWrite);
        }
      }
    }


    bool outOfBoundsY(short newPos)
    {
      if  ((newPos - paddleLength < 0) || (newPos - 1 > LCD_Y)) return true; else return false;
    }

    void makeMove(bool goesUp)
    {

      short newPosY = posY;
      ((goesUp) ? newPosY++ : newPosY--);
      if (outOfBoundsY(newPosY + paddleLength)) newPosY = posY;
      this->drawSelf(0);
      posY = newPosY;
      this->drawSelf(1);
    }

};
//********************** PADDLE CLASS END*************************



Paddle firstPaddle(6, 22, 10, 2); //posX, posY, length
Paddle secondPaddle(76, 22, 10, 2);

char firstScore[] = {'0', '\0'};

char secondScore[] = {'0', '\0'};

void displayScore()
{
  dis.GotoXY(0, 0);
  dis.LcdString(firstScore);
  dis.GotoXY(78, 5);
  dis.LcdString(secondScore);
}

void addScore(bool addLeft)
{
  char temp;
  if(addLeft)
  {
    firstScore[0]+=1;
  }
  else
  {
    secondScore[0]+=1;
  }
}

//********************** BALL CLASS START*************************
class Ball {
  public:
    short speedX;
    short speedY;
    short posX;   //left-topmost pixel
    short posY;
    short sizeX;
    short sizeY;


    Ball(short a, short b, short c, short d, short e, short f)
    {
      speedX = a;
      speedY = b;
      posX = c;
      posY = d;
      sizeX = e;
      sizeY = f;
    }
    bool outOfBoundsX(short newPos)   //todo size
    {
      if (newPos + sizeX - 1 > LCD_X - 1) addScore(1);

      if (newPos < 0) addScore(0);
      
      if (newPos < 0 || newPos + sizeX - 1 > LCD_X - 1)  return true; else return false;
    }
    
    bool outOfBoundsY(short newPos) {   //todo size
      if  (newPos < 0 || newPos + sizeY - 1 > LCD_Y - 1) return true; else return false;
    }

    void drawSelf(bool visible)
    {
      for (short times = 0; times < sizeX; times++)
      {
        short row = posY / 8;
        short rowStart = posY % 8;
        if (!visible)
        {
          for (short x = row; x < row + (sizeY / 8) + 2; x++)
          {
            dis.GotoXY(posX + times, x);
            dis.LcdWrite(LCD_D, 0x00);
          }
        }
        else
        {
          byte toWrite = 0;
          short runner = 0;
          for (short x = 0; x < sizeY; x++)
          {
            if (rowStart + runner < 8)
            {
              toWrite += 1 << (rowStart + runner);
              runner++;
            }
            else
            {
              dis.GotoXY(posX + times, row);
              dis.LcdWrite(LCD_D, toWrite);
              toWrite = 1;
              row++;
              rowStart = 0;
              runner = 1;

            }
          }
          dis.GotoXY(posX + times, row);
          dis.LcdWrite(LCD_D, toWrite);
        }
      }
    }

    void makeMove()
    {
      short newPosX = posX + speedX;
      short newPosY = posY + speedY;
      if (outOfBoundsX(newPosX)) {
        newPosX -= 2 * speedX;
        speedX = -1 * speedX;
      }
      if (outOfBoundsY(newPosY)) {
        newPosY -= 2 * speedY;
        speedY = -1 * speedY;
      }
      posX = newPosX;
      posY = newPosY;
      this->drawSelf(1);
    }

    void checkPaddleCollision()   //todo size
    {
      if (posX == firstPaddle.posX+firstPaddle.paddleWidth-1 || posX+sizeX == firstPaddle.posX+1)
      {
        if (posY >= firstPaddle.posY && posY <= firstPaddle.posY + firstPaddle.paddleLength) speedX = -1 * (speedX);
      }
      if (posX + sizeX - 1 == secondPaddle.posX - 1 || posX == secondPaddle.posX + secondPaddle.paddleWidth-1)
      {
        if (posY >= secondPaddle.posY && posY <= secondPaddle.posY + secondPaddle.paddleLength) speedX = -1 * (speedX);
      }
    }
};
//********************** BALL CLASS END*************************





Ball ourBall(1, 1, 41, 23, 3, 3); //speedX, speedY, posX, posY, sizeX, sizeY



short firstPaddleDown = 2;
short firstPaddleUp = 3;
short secondPaddleDown = 15;
short secondPaddleUp = 14;
short musicPin = 6;
//**************************music***************
#define C1 261  
#define D1 294
#define E1 330
#define F1 349
#define G1 392
#define A1 440
#define H1 494
#define C2 523

int sd = 150;   //shortDuration
int usd = 75; //ultra short
int melodySize = 27;
int melody[] = {C1, D1,   C1, E1, 0,    E1, 0,    D1,   C1,   0,  D1,   G1, 0,  G1,   0, D1, E1,   D1, F1,   0,   F1,   0,  G1,  A1, 0,    G1, 0};
int times[] = { sd, 2*sd, sd, sd, 2*sd, sd, 2*sd, 2*sd, 2*sd, sd, 4*sd, sd, sd, 3*sd, 0, sd, 2*sd, sd, sd,  2*sd, sd, 2*sd, sd,  sd, 2*sd, 4*sd, 0};


void setup() {

  pinMode(2, INPUT_PULLUP); //button
  pinMode(3, INPUT_PULLUP);//button
  pinMode(4, INPUT_PULLUP);//button
  pinMode(5, INPUT_PULLUP);//button
  pinMode(14, INPUT_PULLUP);
  pinMode(15, INPUT_PULLUP);
  pinMode(6, OUTPUT); //musicPin
  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(13, OUTPUT);
  
  Serial.begin(9600);
  SPI.begin();
  SPI.setClockDivider (SPI_CLOCK_DIV2);
  dis.LcdInitialise();
    
  
  Serial.println("dunIni");
  //ourBall.drawSelf(1);
   
  dis.GotoXY(0, 0);
  dis.LcdWrite(LCD_D, 0xff);
  delay(1000);
  
  dis.LcdClear();
  dis.ShowFace(1500);
  dis.LcdClear();
  firstPaddle.drawSelf(1);
  secondPaddle.drawSelf(1);

}

long long currTime;
int ballStepTime = 100;
int paddleStepTime = 90;
long long lastPaddleTime = -5000;
long long lastBallTime = -5000;
long long lastMusicTime = -5000;
int melodyRunner = 0;

#define PADDLE_DOWN 1
#define PADDLE_UP 0
bool firstGoUp;
bool firstGoDown;
bool secondGoUp;
bool secondGoDown;

void loop() {

  while (true)
  {
    displayScore();
    secondPaddle.drawSelf(1);
    firstPaddle.drawSelf(1);
    currTime = millis();
    if(currTime > lastPaddleTime+paddleStepTime)
    {
      lastPaddleTime=currTime;  
      firstGoDown = !digitalRead(firstPaddleDown);
      firstGoUp = !digitalRead(firstPaddleUp);
      secondGoUp = !digitalRead(secondPaddleUp);
      secondGoDown = !digitalRead(secondPaddleDown);

      if (firstGoUp && (firstGoDown))
      {
        //do nothing
      }
      else
      {
        if (firstGoDown) {
          firstPaddle.makeMove(PADDLE_DOWN);
        }
        if (firstGoUp) {
          firstPaddle.makeMove(PADDLE_UP);
        }
      }

      if (secondGoUp && (secondGoDown))
      {
        //do nothing
      }
      else
      {
        if (secondGoDown) {
          secondPaddle.makeMove(PADDLE_DOWN);
        }
        if (secondGoUp) {
          secondPaddle.makeMove(PADDLE_UP);
        }
      }
    }
    

    if(currTime > lastBallTime+ballStepTime)
    {
      lastBallTime = currTime;
      ourBall.drawSelf(0);
      ourBall.makeMove();
      ourBall.checkPaddleCollision();
    }
    
    if(currTime > lastMusicTime+times[melodyRunner])
    {
      lastMusicTime=currTime;
      if(melody[melodyRunner])
      {
        tone(musicPin, melody[melodyRunner++]);
      }
      else
      {
        noTone(musicPin);
        melodyRunner++;
      }
      if(melodyRunner == melodySize) melodyRunner = 0;
      
    }
  }
}
